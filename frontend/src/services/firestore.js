import { 
  collection, 
  doc, 
  getDocs, 
  getDoc, 
  addDoc, 
  updateDoc, 
  deleteDoc,
  query,
  where,
  orderBy,
  serverTimestamp,
  setDoc
} from 'firebase/firestore';
import { db } from '../config/firebase';

// „É¶„Éº„Ç∂„Éº„Éó„É≠„Éï„Ç£„Éº„É´ÁÆ°ÁêÜ
export const createUserProfile = async (userId, userData) => {
  try {
    const userRef = doc(db, 'users', userId);
    await setDoc(userRef, {
      ...userData,
      createdAt: serverTimestamp(),
      updatedAt: serverTimestamp()
    });
    return userId;
  } catch (error) {
    console.error('Error creating user profile:', error);
    throw error;
  }
};

export const getUserProfile = async (userId) => {
  try {
    const userRef = doc(db, 'users', userId);
    const userSnap = await getDoc(userRef);
    
    if (userSnap.exists()) {
      return { id: userSnap.id, ...userSnap.data() };
    } else {
      return null;
    }
  } catch (error) {
    console.error('Error getting user profile:', error);
    throw error;
  }
};

// ÁõÆÊ®ôÁÆ°ÁêÜ
export const saveGoal = async (userId, goalData) => {
  try {
    const goalsRef = collection(db, 'users', userId, 'goals');
    const docRef = await addDoc(goalsRef, {
      ...goalData,
      createdAt: serverTimestamp(),
      updatedAt: serverTimestamp()
    });
    return docRef.id;
  } catch (error) {
    console.error('Error saving goal:', error);
    throw error;
  }
};

export const getUserGoals = async (userId) => {
  try {
    const goalsRef = collection(db, 'users', userId, 'goals');
    const q = query(goalsRef, orderBy('createdAt', 'desc'));
    const querySnapshot = await getDocs(q);
    
    return querySnapshot.docs.map(doc => ({
      id: doc.id,
      ...doc.data()
    }));
  } catch (error) {
    console.error('Error fetching user goals:', error);
    throw error;
  }
};

export const updateGoal = async (userId, goalId, updateData) => {
  try {
    const goalRef = doc(db, 'users', userId, 'goals', goalId);
    await updateDoc(goalRef, {
      ...updateData,
      updatedAt: serverTimestamp()
    });
  } catch (error) {
    console.error('Error updating goal:', error);
    throw error;
  }
};

export const deleteGoal = async (userId, goalId) => {
  try {
    const goalRef = doc(db, 'users', userId, 'goals', goalId);
    await deleteDoc(goalRef);
  } catch (error) {
    console.error('Error deleting goal:', error);
    throw error;
  }
};

// „Éó„É©„É≥ÁÆ°ÁêÜ
export const savePlan = async (userId, goalId, planData) => {
  try {
    const planRef = doc(db, 'users', userId, 'goals', goalId);
    await updateDoc(planRef, {
      plan: planData,
      hasGeneratedPlan: true,
      updatedAt: serverTimestamp()
    });
  } catch (error) {
    console.error('Error saving plan:', error);
    throw error;
  }
};

// „Çø„Çπ„ÇØÂÆå‰∫ÜÁä∂Ê≥ÅÁÆ°ÁêÜ
export const saveTaskProgress = async (userId, goalId, completedTasks) => {
  try {
    const goalRef = doc(db, 'users', userId, 'goals', goalId);
    await updateDoc(goalRef, {
      completedTasks: Array.from(completedTasks),
      updatedAt: serverTimestamp()
    });
  } catch (error) {
    console.error('Error saving task progress:', error);
    throw error;
  }
};

// ÁèæÂú®„ÅÆ„Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Å™ÁõÆÊ®ô„ÇíÂèñÂæó
export const getCurrentGoal = async (userId) => {
  try {
    console.log('üîç getCurrentGoal ÂÆüË°å - userId:', userId);
    const goalsRef = collection(db, 'users', userId, 'goals');
    const q = query(
      goalsRef, 
      where('isActive', '==', true),
      orderBy('updatedAt', 'desc')
    );
    const querySnapshot = await getDocs(q);
    console.log('üîç „ÇØ„Ç®„É™ÁµêÊûú - „Éâ„Ç≠„É•„É°„É≥„ÉàÊï∞:', querySnapshot.size);
    
    if (!querySnapshot.empty) {
      const doc = querySnapshot.docs[0];
      const goalData = { id: doc.id, ...doc.data() };
      console.log('üîç ÂèñÂæó„Åó„ÅüÁõÆÊ®ô„Éá„Éº„Çø:', goalData);
      return goalData;
    }
    
    // „Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Å™ÁõÆÊ®ô„ÅåË¶ã„Å§„Åã„Çâ„Å™„ÅÑÂ†¥Âêà„ÄÅÊúÄÊñ∞„ÅÆÁõÆÊ®ô„ÇíÂèñÂæó
    console.log('üîç „Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Å™ÁõÆÊ®ô„ÅåË¶ã„Å§„Åã„Çâ„Å™„ÅÑ„Åü„ÇÅ„ÄÅÊúÄÊñ∞„ÅÆÁõÆÊ®ô„ÇíÊ§úÁ¥¢');
    const latestQuery = query(goalsRef, orderBy('updatedAt', 'desc'));
    const latestSnapshot = await getDocs(latestQuery);
    
    if (!latestSnapshot.empty) {
      const doc = latestSnapshot.docs[0];
      const goalData = { id: doc.id, ...doc.data() };
      console.log('üîç ÊúÄÊñ∞„ÅÆÁõÆÊ®ô„Éá„Éº„Çø:', goalData);
      return goalData;
    }
    
    console.log('üîç ÁõÆÊ®ô„ÅåÂÖ®„ÅèË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì');
    return null;
  } catch (error) {
    console.error('Error getting current goal:', error);
    throw error;
  }
};

// ÁõÆÊ®ô„Çí„Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Å´Ë®≠ÂÆö
export const setActiveGoal = async (userId, goalId) => {
  try {
    // Êó¢Â≠ò„ÅÆ„Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Å™ÁõÆÊ®ô„ÇíÈùû„Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Å´
    const goalsRef = collection(db, 'users', userId, 'goals');
    const activeGoalsQuery = query(goalsRef, where('isActive', '==', true));
    const activeGoalsSnapshot = await getDocs(activeGoalsQuery);
    
    const batch = [];
    activeGoalsSnapshot.docs.forEach(doc => {
      batch.push(updateDoc(doc.ref, { 
        isActive: false, 
        updatedAt: serverTimestamp() 
      }));
    });
    
    // Êñ∞„Åó„ÅÑÁõÆÊ®ô„Çí„Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Å´
    const newActiveGoalRef = doc(db, 'users', userId, 'goals', goalId);
    batch.push(updateDoc(newActiveGoalRef, { 
      isActive: true, 
      updatedAt: serverTimestamp() 
    }));
    
    await Promise.all(batch);
  } catch (error) {
    console.error('Error setting active goal:', error);
    throw error;
  }
};